// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: proto/gque.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GqueService_CreateQueue_FullMethodName          = "/proto.GqueService/CreateQueue"
	GqueService_CreateBroadcast_FullMethodName      = "/proto.GqueService/CreateBroadcast"
	GqueService_PushMessage_FullMethodName          = "/proto.GqueService/PushMessage"
	GqueService_BroadcastMessage_FullMethodName     = "/proto.GqueService/BroadcastMessage"
	GqueService_ConsumeQueueMessages_FullMethodName = "/proto.GqueService/ConsumeQueueMessages"
)

// GqueServiceClient is the client API for GqueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GqueServiceClient interface {
	CreateQueue(ctx context.Context, in *QueueCreateRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	CreateBroadcast(ctx context.Context, in *BroadcastCreateRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	PushMessage(ctx context.Context, in *PushMessageRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	BroadcastMessage(ctx context.Context, in *BroadcastMessageRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	ConsumeQueueMessages(ctx context.Context, in *ConsumerRequest, opts ...grpc.CallOption) (GqueService_ConsumeQueueMessagesClient, error)
}

type gqueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGqueServiceClient(cc grpc.ClientConnInterface) GqueServiceClient {
	return &gqueServiceClient{cc}
}

func (c *gqueServiceClient) CreateQueue(ctx context.Context, in *QueueCreateRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, GqueService_CreateQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gqueServiceClient) CreateBroadcast(ctx context.Context, in *BroadcastCreateRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, GqueService_CreateBroadcast_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gqueServiceClient) PushMessage(ctx context.Context, in *PushMessageRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, GqueService_PushMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gqueServiceClient) BroadcastMessage(ctx context.Context, in *BroadcastMessageRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SuccessResponse)
	err := c.cc.Invoke(ctx, GqueService_BroadcastMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gqueServiceClient) ConsumeQueueMessages(ctx context.Context, in *ConsumerRequest, opts ...grpc.CallOption) (GqueService_ConsumeQueueMessagesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GqueService_ServiceDesc.Streams[0], GqueService_ConsumeQueueMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &gqueServiceConsumeQueueMessagesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GqueService_ConsumeQueueMessagesClient interface {
	Recv() (*ConsumerMessage, error)
	grpc.ClientStream
}

type gqueServiceConsumeQueueMessagesClient struct {
	grpc.ClientStream
}

func (x *gqueServiceConsumeQueueMessagesClient) Recv() (*ConsumerMessage, error) {
	m := new(ConsumerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GqueServiceServer is the server API for GqueService service.
// All implementations must embed UnimplementedGqueServiceServer
// for forward compatibility
type GqueServiceServer interface {
	CreateQueue(context.Context, *QueueCreateRequest) (*SuccessResponse, error)
	CreateBroadcast(context.Context, *BroadcastCreateRequest) (*SuccessResponse, error)
	PushMessage(context.Context, *PushMessageRequest) (*SuccessResponse, error)
	BroadcastMessage(context.Context, *BroadcastMessageRequest) (*SuccessResponse, error)
	ConsumeQueueMessages(*ConsumerRequest, GqueService_ConsumeQueueMessagesServer) error
	mustEmbedUnimplementedGqueServiceServer()
}

// UnimplementedGqueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGqueServiceServer struct {
}

func (UnimplementedGqueServiceServer) CreateQueue(context.Context, *QueueCreateRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedGqueServiceServer) CreateBroadcast(context.Context, *BroadcastCreateRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBroadcast not implemented")
}
func (UnimplementedGqueServiceServer) PushMessage(context.Context, *PushMessageRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMessage not implemented")
}
func (UnimplementedGqueServiceServer) BroadcastMessage(context.Context, *BroadcastMessageRequest) (*SuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastMessage not implemented")
}
func (UnimplementedGqueServiceServer) ConsumeQueueMessages(*ConsumerRequest, GqueService_ConsumeQueueMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ConsumeQueueMessages not implemented")
}
func (UnimplementedGqueServiceServer) mustEmbedUnimplementedGqueServiceServer() {}

// UnsafeGqueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GqueServiceServer will
// result in compilation errors.
type UnsafeGqueServiceServer interface {
	mustEmbedUnimplementedGqueServiceServer()
}

func RegisterGqueServiceServer(s grpc.ServiceRegistrar, srv GqueServiceServer) {
	s.RegisterService(&GqueService_ServiceDesc, srv)
}

func _GqueService_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GqueServiceServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GqueService_CreateQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GqueServiceServer).CreateQueue(ctx, req.(*QueueCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GqueService_CreateBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GqueServiceServer).CreateBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GqueService_CreateBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GqueServiceServer).CreateBroadcast(ctx, req.(*BroadcastCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GqueService_PushMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GqueServiceServer).PushMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GqueService_PushMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GqueServiceServer).PushMessage(ctx, req.(*PushMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GqueService_BroadcastMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GqueServiceServer).BroadcastMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GqueService_BroadcastMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GqueServiceServer).BroadcastMessage(ctx, req.(*BroadcastMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GqueService_ConsumeQueueMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConsumerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GqueServiceServer).ConsumeQueueMessages(m, &gqueServiceConsumeQueueMessagesServer{ServerStream: stream})
}

type GqueService_ConsumeQueueMessagesServer interface {
	Send(*ConsumerMessage) error
	grpc.ServerStream
}

type gqueServiceConsumeQueueMessagesServer struct {
	grpc.ServerStream
}

func (x *gqueServiceConsumeQueueMessagesServer) Send(m *ConsumerMessage) error {
	return x.ServerStream.SendMsg(m)
}

// GqueService_ServiceDesc is the grpc.ServiceDesc for GqueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GqueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GqueService",
	HandlerType: (*GqueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQueue",
			Handler:    _GqueService_CreateQueue_Handler,
		},
		{
			MethodName: "CreateBroadcast",
			Handler:    _GqueService_CreateBroadcast_Handler,
		},
		{
			MethodName: "PushMessage",
			Handler:    _GqueService_PushMessage_Handler,
		},
		{
			MethodName: "BroadcastMessage",
			Handler:    _GqueService_BroadcastMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConsumeQueueMessages",
			Handler:       _GqueService_ConsumeQueueMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/gque.proto",
}
